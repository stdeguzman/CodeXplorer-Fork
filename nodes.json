[{"idx": 0, "type": "function", "name": "__main__", "code": "data = pd.read_csv('data/house_prices.csv')\nX = data[['Area', 'Bedrooms', 'Bathrooms']]\ny = data['Price']\nmodels = [LinearRegression(), DecisionTreeRegressor()]\ncomparator = ModelComparator(models)\ncomparator.fit_and_evaluate(X_train, y_train, X_valid, y_valid)\nbest_model = comparator.get_best_model()\ntest_predictions = best_model.predict(X_test)\ntest_mse = mean_squared_error(y_test, test_predictions)\nprint(f'Test MSE of Best Model: {test_mse}')\nvisualizer = ResultVisualizer()\nvisualizer.vis_data(data)\nvisualizer.vis_preds(y_test, test_predictions)\nvisualizer.vis_feature_importance(best_model)", "source": "example1/main.py", "children": [1, 2, 3, 4, 5, 6, 7, 8, 9], "context": null}, {"idx": 1, "type": "variable", "name": "data", "code": "data = pd.read_csv('data/house_prices.csv')", "source": "example1/main.py", "children": [], "context": null}, {"idx": 2, "type": "variable", "name": "X", "code": "X = data[['Area', 'Bedrooms', 'Bathrooms']]", "source": "example1/main.py", "children": [], "context": null}, {"idx": 3, "type": "variable", "name": "y", "code": "y = data['Price']", "source": "example1/main.py", "children": [], "context": null}, {"idx": 4, "type": "variable", "name": "models", "code": "models = [LinearRegression(), DecisionTreeRegressor()]", "source": "example1/main.py", "children": [], "context": null}, {"idx": 5, "type": "variable", "name": "comparator", "code": "comparator = ModelComparator(models)", "source": "example1/main.py", "children": [], "context": null}, {"idx": 6, "type": "variable", "name": "best_model", "code": "best_model = comparator.get_best_model()", "source": "example1/main.py", "children": [], "context": null}, {"idx": 7, "type": "variable", "name": "test_predictions", "code": "test_predictions = best_model.predict(X_test)", "source": "example1/main.py", "children": [], "context": null}, {"idx": 8, "type": "variable", "name": "test_mse", "code": "test_mse = mean_squared_error(y_test, test_predictions)", "source": "example1/main.py", "children": [], "context": null}, {"idx": 9, "type": "variable", "name": "visualizer", "code": "visualizer = ResultVisualizer()", "source": "example1/main.py", "children": [], "context": null}, {"idx": 10, "type": "function", "name": "__main__", "code": "__main__", "source": "example1/src/comparator.py", "children": [11], "context": null}, {"idx": 11, "type": "class", "name": "ModelComparator", "code": "class ModelComparator:\n\n    def __init__(self, models):\n        self.models = models\n        self.best_model = None\n\n    def fit_and_evaluate(self, X_train, y_train, X_valid, y_valid):\n        best_mse = np.inf\n        for model in self.models:\n            model.fit(X_train, y_train)\n            predictions = model.predict(X_valid)\n            mse = mean_squared_error(y_valid, predictions)\n            if mse < best_mse:\n                best_mse = mse\n                self.best_model = model\n\n    def get_best_model(self):\n        return self.best_model", "source": "example1/src/comparator.py", "children": [12, 14, 15, 16, 25, 26], "context": null}, {"idx": 12, "type": "function", "name": "__init__", "code": "def __init__(self, models):\n    self.models = models\n    self.best_model = None", "source": "example1/src/comparator.py", "children": [13], "context": 11}, {"idx": 13, "type": "variable", "name": "models", "code": "models", "source": "example1/src/comparator.py", "children": [], "context": null}, {"idx": 14, "type": "variable", "name": "models", "code": "self.models = models", "source": "example1/src/comparator.py", "children": [], "context": null}, {"idx": 15, "type": "variable", "name": "best_model", "code": "self.best_model = None", "source": "example1/src/comparator.py", "children": [], "context": null}, {"idx": 16, "type": "function", "name": "fit_and_evaluate", "code": "def fit_and_evaluate(self, X_train, y_train, X_valid, y_valid):\n    best_mse = np.inf\n    for model in self.models:\n        model.fit(X_train, y_train)\n        predictions = model.predict(X_valid)\n        mse = mean_squared_error(y_valid, predictions)\n        if mse < best_mse:\n            best_mse = mse\n            self.best_model = model", "source": "example1/src/comparator.py", "children": [17, 18, 19, 20, 21, 22, 23, 24], "context": 11}, {"idx": 17, "type": "variable", "name": "X_train", "code": "X_train", "source": "example1/src/comparator.py", "children": [], "context": null}, {"idx": 18, "type": "variable", "name": "y_train", "code": "y_train", "source": "example1/src/comparator.py", "children": [], "context": null}, {"idx": 19, "type": "variable", "name": "X_valid", "code": "X_valid", "source": "example1/src/comparator.py", "children": [], "context": null}, {"idx": 20, "type": "variable", "name": "y_valid", "code": "y_valid", "source": "example1/src/comparator.py", "children": [], "context": null}, {"idx": 21, "type": "variable", "name": "best_mse", "code": "best_mse = np.inf", "source": "example1/src/comparator.py", "children": [], "context": null}, {"idx": 22, "type": "variable", "name": "predictions", "code": "predictions = model.predict(X_valid)", "source": "example1/src/comparator.py", "children": [], "context": null}, {"idx": 23, "type": "variable", "name": "mse", "code": "mse = mean_squared_error(y_valid, predictions)", "source": "example1/src/comparator.py", "children": [], "context": null}, {"idx": 24, "type": "variable", "name": "best_mse", "code": "best_mse = mse", "source": "example1/src/comparator.py", "children": [], "context": null}, {"idx": 25, "type": "variable", "name": "best_model", "code": "self.best_model = model", "source": "example1/src/comparator.py", "children": [], "context": null}, {"idx": 26, "type": "function", "name": "get_best_model", "code": "def get_best_model(self):\n    return self.best_model", "source": "example1/src/comparator.py", "children": [], "context": 11}, {"idx": 27, "type": "function", "name": "__main__", "code": "__main__", "source": "example1/src/visualizer.py", "children": [28], "context": null}, {"idx": 28, "type": "class", "name": "ResultVisualizer", "code": "class ResultVisualizer:\n\n    def vis_data(self, data):\n        sns.pairplot(data, x_vars=['Area', 'Bedrooms', 'Bathrooms'], y_vars='Price', height=4, aspect=1, kind='scatter')\n        plt.savefig('data.png')\n        plt.clf()\n        plt.close()\n\n    def vis_preds(self, y_true, y_pred):\n        plt.scatter(y_true, y_pred)\n        plt.xlabel('Actual Prices')\n        plt.ylabel('Predicted Prices')\n        plt.title('Predicted vs Actual Prices')\n        plt.plot([y_true.min(), y_true.max()], [y_true.min(), y_true.max()], 'k--', lw=2)\n        plt.savefig('preds.png')\n        plt.clf()\n        plt.close()\n\n    def vis_feature_importance(self, best_model):\n        if hasattr(best_model, 'feature_importances_'):\n            sns.barplot(x=best_model.feature_importances_, y=['Area', 'Bedrooms', 'Bathrooms'])\n            plt.title('Feature Importance')\n            plt.savefig('feat.png')\n            plt.clf()\n            plt.close()", "source": "example1/src/visualizer.py", "children": [29, 31, 34], "context": null}, {"idx": 29, "type": "function", "name": "vis_data", "code": "def vis_data(self, data):\n    sns.pairplot(data, x_vars=['Area', 'Bedrooms', 'Bathrooms'], y_vars='Price', height=4, aspect=1, kind='scatter')\n    plt.savefig('data.png')\n    plt.clf()\n    plt.close()", "source": "example1/src/visualizer.py", "children": [30], "context": 28}, {"idx": 30, "type": "variable", "name": "data", "code": "data", "source": "example1/src/visualizer.py", "children": [], "context": null}, {"idx": 31, "type": "function", "name": "vis_preds", "code": "def vis_preds(self, y_true, y_pred):\n    plt.scatter(y_true, y_pred)\n    plt.xlabel('Actual Prices')\n    plt.ylabel('Predicted Prices')\n    plt.title('Predicted vs Actual Prices')\n    plt.plot([y_true.min(), y_true.max()], [y_true.min(), y_true.max()], 'k--', lw=2)\n    plt.savefig('preds.png')\n    plt.clf()\n    plt.close()", "source": "example1/src/visualizer.py", "children": [32, 33], "context": 28}, {"idx": 32, "type": "variable", "name": "y_true", "code": "y_true", "source": "example1/src/visualizer.py", "children": [], "context": null}, {"idx": 33, "type": "variable", "name": "y_pred", "code": "y_pred", "source": "example1/src/visualizer.py", "children": [], "context": null}, {"idx": 34, "type": "function", "name": "vis_feature_importance", "code": "def vis_feature_importance(self, best_model):\n    if hasattr(best_model, 'feature_importances_'):\n        sns.barplot(x=best_model.feature_importances_, y=['Area', 'Bedrooms', 'Bathrooms'])\n        plt.title('Feature Importance')\n        plt.savefig('feat.png')\n        plt.clf()\n        plt.close()", "source": "example1/src/visualizer.py", "children": [35], "context": 28}, {"idx": 35, "type": "variable", "name": "best_model", "code": "best_model", "source": "example1/src/visualizer.py", "children": [], "context": null}]